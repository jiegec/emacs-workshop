* Introduction
** Installing Emacs
If you're using a Linux distribution, obtaining Emacs should be easily achievable through your respective package managers.

For OSX users, I recommend [[https://emacsformacosx.com/][Emacs for OSX]].

This workshop assumes that a recent Emacs version (of version >24.0) has been installed. You can check your Emacs version from the command line with =emacs --version=.

** Terminology
*** Windows, Frames and Buffers
The text you are editing in Emacs resides in an object called the *buffer*.

A *window* is a container for a buffer. A window can contain one and only one buffer.

A *frame* is a container for windows. While inaccurate, one can think of it as the window configuration for Emacs.

#+CAPTION: A pictorial representation of windows, frames and buffers. In this picture, there are 1 frame, 3 windows and 3 buffers.
[[./images/windowframebuffers.png]]

An Emacs beginner might find the distinction between a buffer and a window unnecessary. This distinction is made because a different window can display the same buffer, and this may come in useful when juxtaposing text in different positions of the file.
*** Killing, Yanking and the CUA
The biggest deviation from modern standards in Emacs would most likely be the Emacs clipboard system. The table below shows the analogous terminologies for the clipboard system:

| Modern | Emacs             |
|--------+-------------------|
| Cut    | Kill              |
| Paste  | Yank              |
| Copy   | Save To Kill Ring |

The Emacs terminology was set in stone decades ago, long before the terms 'cut', 'copy' and 'paste' (derived from the CUA, or Common User Access) were formed.

I will demonstrate in a later chapter why the Emacs way is better for text-editing.

*** Modes, Major Modes and Minor Modes
*Major modes* control how buffers behave. Each buffer will have /one and only one/ major mode. Most major modes tend to be language-specific. For example, when opening a Python file =foo.py=, the central Emacs register will figure out that this file is a Python file and load the Python major mode.

Major modes often offer the following functionality:

1. Font Locking (aka syntax highlighting outside of Emacs) 
2. Indentation engines
3. Language-specific keybindings (for refactoring etc.)

In the scenario where Emacs central registry for file extensions should fail to associate the file with a major mode, Emacs will scan the first portion of the file and infer one.

*Minor modes* can be thought of as plugins, meant to add functionality to a buffer. These are optional, and can be added locally per buffer, or globally.

An example of a popular minor mode is the /aggressive-indent mode/, which keeps the text in the buffer properly indented at all times.

*** Modeline
The bottom bar in Emacs is called the *modeline*. The modeline presents useful information, such as what modes are active. The first item in the brackets is typically the major mode, and the others are all minor modes. Note that some minor modes can be configured to not appear on the modeline (a.k.a diminished). To see the full list of modes activated, run =M-x describe-mode=, or =C-h m=.

#+CAPTION: A typical modeline for Emacs
[[./images/modeline.png]]

*** Keybindings and Elisp Functions
Keybindings are combinations of keys that, when pressed, invoke functions. These functions could come out-of-the-box, be provided by a package, or be self-written. They are defined in a language called *Emacs Lisp*, also referred to as *Elisp*.

All these functions are invokable with =M-x=.

*** NEXT: [[file:taming-the-beast.org][Taming the Beast]]                                         :noexport:
In the next chapter, we make our first modifications to Emacs, to make it a saner environment to play around with.
